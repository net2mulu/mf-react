{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleClick","type","onChange","App","handleChange","e","setState","searchField","target","value","state","fetch","then","responce","json","users","this","filteredMonster","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SAGaA,EAAO,SAAAC,GAChB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eAEL,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCPbC,EAAW,SAACR,GACrB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACN,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCJhBM,G,YAAY,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,YACvC,OACE,uBACEZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC8BDG,E,kDAjCb,aAAe,IAAD,8BACZ,gBAOFC,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAPtC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IAJH,E,qDAYd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAEV,SAAUmB,S,oBAE/C,WAAU,IAAD,EAC2BC,KAAKN,MAA/Bd,EADD,EACCA,SAAUW,EADX,EACWA,YACZU,EAAkBrB,EAASsB,QAAO,SAAC3B,GAAD,OACtCA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYY,kBAGlD,OACE,sBAAK/B,UAAU,MAAf,UACE,+CACD,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,YAAagB,KAAKZ,eAC1D,cAAC,EAAD,CAAUR,SAAUqB,W,GA5BVI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.07c5bf0d.chunk.js","sourcesContent":["import React from \"react\";\nimport './card.styles.css';\n\nexport const Card = props => {\n    return (\n      <div className=\"card-container\">\n        <img\n          alt=\"monster\"\n          src={`https://robohash.org/${props.monster.id}?set=set2`}\n        />\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n      </div>\n    );\n}","import React from 'react';\nimport \"./card-list.style.css\";\nimport {Card} from '../card/card.component'\n\nexport const CardList = (props) => {\n    return (\n      <div className=\"card-list\">\n        {props.monsters.map((monster) => (\n          <Card key={monster.id} monster={monster} />\n        ))}\n      </div>\n    );\n}","import React from \"react\";\n\nimport \"./search-box.styles.css\";\n\nexport const SearchBox = ({ placeholder, handleClick }) => {\n  return (\n    <input\n      className=\"search\"\n      type=\"search\"\n      placeholder={placeholder}\n      onChange={handleClick}\n    />\n  );\n};\n","import { Component } from \"react\";\n\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport \"./App.css\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n\n  }\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((responce) => responce.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonster = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters List</h1>  \n       <SearchBox placeholder=\"Search monsters\" handleClick={this.handleChange} />\n        <CardList monsters={filteredMonster} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}